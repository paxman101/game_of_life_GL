//   A {toolkit} developed by Dean Hickerson and Gabriel
   Nivasch in 2006, enabling the construction of patterns with
   asymptotic population growth matching an infinite number of different
   sublinear functions - namely, O(t^(1/2^n)) for any chosen n.  See
   also {exponential filter}, {recursive filter}.

:quadratic growth:  The fastest possible asymptotic rate of population
   growth for any Life pattern - O(t^2) in big-O notation, where t is
   the number of ticks.  The first quadratic-growth pattern found was
   Bill Gosper's 1971 {breeder}.  Many other types of breeders and
   {spacefiller}s have been constructed since.
     In April 2011, Stephen Silver gave an example of a one-cell-thick
   pattern over a million cells long that exhibited quadratic growth.
   In October 2015, Chris Cain constructed a one-cell-thick pattern with
   a reduced bounding box of 2596x1, improving on a series of previous
   longer results.  The smallest known quadratic growth pattern by
   initial population is the 23-cell {switch-engine ping-pong} by
   Michael Simkin.
     There are an infinite number of possible growth rates between
   linear and quadratic growth.  See {superlinear growth}.

:quadratic replicator:  A pattern that fills all or part of the Life
   plane by making copies of itself in a nonlinear way.  Small quadratic
   replicators are known in other Life-like rules, but as of July 2018
   no example has been found or constructed in Conway's Life.

:quadratic sawtooth:  Any {sawtooth} pattern with a quadratic envelope,
   or specifically a pattern assembled by Martin Grant in May 2015,
   consisting of two {caber tosser}s with period multipliers for timing
   which activate and deactivate two toggleable rake guns (see
   {toggleable gun}).  The gliders emitted by those rakes annihilate on
   the diagonal while the rakes are eaten by 2c/5 ships. All the rakes
   and gliders are destroyed before the next cycle.  See also
   {Osqrtlogt}.

:quadri-Snark:  A period-multiplying {colour-preserving} {signal}
   {conduit} found by Tanner Jacobi in October 2017, producing one
   output {glider} for every four input gliders.  It is made by
   replacing one of the eaters in a {tremi-Snark} with a {catalyst}
   found using {Bellman}.  The catalyst causes the formation of a {tub}
   which then requires an additional glider to delete.  However, this
   adds 5 ticks to the repeat time, so that it becomes 48.  If period
   quadrupling is needed with a {colour-changing} reaction, a
   {CP semi-Snark} and a {CC semi-Snark} can be used in series, or a
   period-multiplying {Herschel conduit} can be connected to a {syringe}
   and an appropriately chosen Herschel-to-glider {converter}.

	.*.......................................................
	..*......................................................
	***......................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.............*...........................................
	..............*..........................................
	............***..........................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................................................
	.........................*...............................
	..........................*..............................
	........................***..............**..............
	..........................................*..............
	........................................*.....**.........
	........................................**.....*.........
	...............................................*.**......
	........................................**..**.*..*......
	........................................**...*.**........
	.............................................*...........
	............................................**...........
	...................................................**....
	.....................................*.............*.*...
	......................................*..............*...
	....................................***..............*.**
	...........................................**.....**.*.*.
	...........................................**.....**.*.*.
	.....................................................*.**
	..................................**..............****..*
	.................................*.*..............*...**.
	.................................*..................**...
	................................**...................*...
	...................................................*.....
	...................................................**....
